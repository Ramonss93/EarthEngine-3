var isLeapYear = function(year)
{
  return ((year % 4 === 0 && year !== 100) || year % 400 === 0);
};

var getDaysInMonth = function(year, month)
{
  var leapYear = isLeapYear(parseInt(year, 10));
  var daysInMonth = 0;
  var monthNumber = parseInt(month, 10);

  if(monthNumber === 2)
  {
    if(leapYear)
      daysInMonth = 29;
    else
      daysInMonth = 28;
  }
  else if(monthNumber === 4 || monthNumber === 6 ||
    monthNumber === 9 || monthNumber === 11)
  {
    daysInMonth = 30;
  }
  else
  {
    daysInMonth = 31;
  }
  return (daysInMonth);
};

/* Kitörölt rész! */



var center = studyArea.centroid();
print(center);

/* Sets the map view to the center of the study area */
Map.setCenter(14.98, 37.74, 12);

// Loads the Sentinel-1 image collection
var sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD');

/* Set start and end date for filtering the collection */
var currentYear = new Date().getFullYear();
var year = prompt("Add meg az évet 2000 és "+currentYear+" között!", "2016");
var month = prompt("Add meg a hónapot a havi képek előállításához!", "07");

var start = ee.Date(year+'-'+month+'-01');
var finish = ee.Date(year+'-'+month+'-'+getDaysInMonth(year, month));

print(getDaysInMonth(year, month));

 /* Filtering based on metadata properties */
var vh = sentinel1
  // Filter to get images with VV and VH dual polarization.
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  // Filter to get images collected in interferometric wide swath mode.
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .filterBounds(studyArea)
  .filterDate(start, finish);

// Filter to get images from different look angles.
var vhAscending = vh.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'));
var vhDescending = vh.filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));

// Create a composite from means at different polarizations and look angles.
var composite = ee.Image.cat([
  vhAscending.select('VH').mean(),
  ee.ImageCollection(vhAscending.select('VV').merge(vhDescending.select('VV'))).mean(),
  vhDescending.select('VV').mean()
]).focal_median();

var clipped = composite.clip(studyArea);
// Display as a composite of polarization and backscattering characteristics.
Map.addLayer(clipped,{min: [-25, -20, -25], max: [0, 10, 0]}, 'composite');


// Save the composite image as GeoTIFF
/*
Export.image.toDrive(
{
    image: clipped,
    description: 'Sentinel'+year+month+'Etna',
    scale: 10,
    region: studyArea
});*/
